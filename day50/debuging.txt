Day 50) #100daysofcode #Codetraingh.

Knowledge of Currying, Hoisting, Concurrency Model and Event Loop, Memory allocation between the data structures ie Heap and Stack and Debugging memory issues using devtools is an important skill for every developer.

The button “Allocate Memory” uses an event listener to add a string of an arbitrary length to the strings array each time the button is selected.

Click on the “Allocate Memory” button at least one time to trigger a stringBuilder() function in the code.

In the Console tab, a string generated by the stringBuilder() function is logged, followed by the number of characters in the string. This view shows the approximate size of the string in parentheses. In the example below, the string is 907,956characters long and takes up about 908kB of memory:

- Click on the memory tab to see what JS object are taking up memory by reading the Heap snapshot

- select the round button near the top left to create a snapshot or click on the take snapshot button. This creates a snapshot on the sidebars that shows a summary view of the Heap snapshot.

When you take a closer look,  generally you can ignore anything in parenthesis assuming that leaks will be coming from the code you are running and not the browser source codes.

In the summary view, objects are grouped based on the constructor function that was used to instantiate an object. In our case, we used the ”stringBuilder” constructor function to instantiate stringBuilder objects.

- Scroll down or use the search box to filter “stringBuilder” objects

- Expand an instance of ”stringBuilder” under the ”stringBuilder” class list.

This object has a string object and a built-in __proto__ object. On the right-hand side, there are columns for Distance, Shallow Size, and Retained Size.

- Expand the __proto__ property, then expand the constructor property. You can see the constructor function stringBuilder() was used to 

instantiate the object. When debugging, this can be helpful to identify how an object was instantiated if you are trying to track down objects that are being maintained in memory.

- Inside the constructor property, you’ll see a hyperlink to page reference :11 and can hover over the stringBuilder() function to see the function definition. The 11 at the end of page reference indicates that the function definition begins on line 11. That's helpful to know in case you are working with a large code file and need to quickly find the right line of code to review.

Click on the reference link. The file will open in the Sources tab. Find the stringBuilder() function definition on line 11.

Read this article to get more knowledge on how to debug memory challenges in JS as there is more to know.

https://www.codecademy.com/courses/learn-intermediate-javascript/articles/javascript-debugging-memory-issues