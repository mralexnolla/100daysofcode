{"ast":null,"code":"/*!\n * cookie\n * Copyright(c) 2012-2014 Roman Shtylman\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n/**\n * Module exports.\n * @public\n */\n\nvar parse_1 = parse;\nvar serialize_1 = serialize;\n\n/**\n * Module variables.\n * @private\n */\n\nvar decode = decodeURIComponent;\nvar encode = encodeURIComponent;\nvar pairSplitRegExp = /; */;\n\n/**\n * RegExp to match field-content in RFC 7230 sec 3.2\n *\n * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n * field-vchar   = VCHAR / obs-text\n * obs-text      = %x80-FF\n */\n\nvar fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\n\n/**\n * Parse a cookie header.\n *\n * Parse the given cookie header string into an object\n * The object has the various cookies as keys(names) => values\n *\n * @param {string} str\n * @param {object} [options]\n * @return {object}\n * @public\n */\n\nfunction parse(str, options) {\n  if (typeof str !== 'string') {\n    throw new TypeError('argument str must be a string');\n  }\n  var obj = {};\n  var opt = options || {};\n  var pairs = str.split(pairSplitRegExp);\n  var dec = opt.decode || decode;\n  for (var i = 0; i < pairs.length; i++) {\n    var pair = pairs[i];\n    var eq_idx = pair.indexOf('=');\n\n    // skip things that don't look like key=value\n    if (eq_idx < 0) {\n      continue;\n    }\n    var key = pair.substr(0, eq_idx).trim();\n    var val = pair.substr(++eq_idx, pair.length).trim();\n\n    // quoted values\n    if ('\"' == val[0]) {\n      val = val.slice(1, -1);\n    }\n\n    // only assign once\n    if (undefined == obj[key]) {\n      obj[key] = tryDecode(val, dec);\n    }\n  }\n  return obj;\n}\n\n/**\n * Serialize data into a cookie header.\n *\n * Serialize the a name value pair into a cookie string suitable for\n * http headers. An optional options object specified cookie parameters.\n *\n * serialize('foo', 'bar', { httpOnly: true })\n *   => \"foo=bar; httpOnly\"\n *\n * @param {string} name\n * @param {string} val\n * @param {object} [options]\n * @return {string}\n * @public\n */\n\nfunction serialize(name, val, options) {\n  var opt = options || {};\n  var enc = opt.encode || encode;\n  if (typeof enc !== 'function') {\n    throw new TypeError('option encode is invalid');\n  }\n  if (!fieldContentRegExp.test(name)) {\n    throw new TypeError('argument name is invalid');\n  }\n  var value = enc(val);\n  if (value && !fieldContentRegExp.test(value)) {\n    throw new TypeError('argument val is invalid');\n  }\n  var str = name + '=' + value;\n  if (null != opt.maxAge) {\n    var maxAge = opt.maxAge - 0;\n    if (isNaN(maxAge) || !isFinite(maxAge)) {\n      throw new TypeError('option maxAge is invalid');\n    }\n    str += '; Max-Age=' + Math.floor(maxAge);\n  }\n  if (opt.domain) {\n    if (!fieldContentRegExp.test(opt.domain)) {\n      throw new TypeError('option domain is invalid');\n    }\n    str += '; Domain=' + opt.domain;\n  }\n  if (opt.path) {\n    if (!fieldContentRegExp.test(opt.path)) {\n      throw new TypeError('option path is invalid');\n    }\n    str += '; Path=' + opt.path;\n  }\n  if (opt.expires) {\n    if (typeof opt.expires.toUTCString !== 'function') {\n      throw new TypeError('option expires is invalid');\n    }\n    str += '; Expires=' + opt.expires.toUTCString();\n  }\n  if (opt.httpOnly) {\n    str += '; HttpOnly';\n  }\n  if (opt.secure) {\n    str += '; Secure';\n  }\n  if (opt.sameSite) {\n    var sameSite = typeof opt.sameSite === 'string' ? opt.sameSite.toLowerCase() : opt.sameSite;\n    switch (sameSite) {\n      case true:\n        str += '; SameSite=Strict';\n        break;\n      case 'lax':\n        str += '; SameSite=Lax';\n        break;\n      case 'strict':\n        str += '; SameSite=Strict';\n        break;\n      case 'none':\n        str += '; SameSite=None';\n        break;\n      default:\n        throw new TypeError('option sameSite is invalid');\n    }\n  }\n  return str;\n}\n\n/**\n * Try decoding a string using a decoding function.\n *\n * @param {string} str\n * @param {function} decode\n * @private\n */\n\nfunction tryDecode(str, decode) {\n  try {\n    return decode(str);\n  } catch (e) {\n    return str;\n  }\n}\n\n/**\r\n * Sets a given cookie on the mocked response.\r\n * @example res(ctx.cookie('name', 'value'))\r\n */\nconst cookie = (name, value, options) => {\n  return res => {\n    const serializedCookie = serialize_1(name, value, options);\n    res.headers.set('Set-Cookie', serializedCookie);\n    if (typeof document !== 'undefined') {\n      document.cookie = serializedCookie;\n    }\n    return res;\n  };\n};\n\n/**\r\n * Sets a raw response body. Does not append any `Content-Type` headers.\r\n * @example\r\n * res(ctx.body('Successful response'))\r\n * res(ctx.body(JSON.stringify({ key: 'value' })))\r\n * @see {@link https://mswjs.io/docs/api/context/body `ctx.body()`}\r\n */\nconst body = value => {\n  return res => {\n    res.body = value;\n    return res;\n  };\n};\n\n/**\r\n * Sets a textual response body. Appends a `Content-Type: text/plain`\r\n * header on the mocked response.\r\n * @example res(ctx.text('Successful response'))\r\n * @see {@link https://mswjs.io/docs/api/context/text `ctx.text()`}\r\n */\nconst text = body => {\n  return res => {\n    res.headers.set('Content-Type', 'text/plain');\n    res.body = body;\n    return res;\n  };\n};\n\n/**\r\n * Sets an XML response body. Appends a `Content-Type: text/xml` header\r\n * on the mocked response.\r\n * @example\r\n * res(ctx.xml('<node key=\"value\">Content</node>'))\r\n * @see {@link https://mswjs.io/docs/api/context/xml `ctx.xml()`}\r\n */\nconst xml = body => {\n  return res => {\n    res.headers.set('Content-Type', 'text/xml');\n    res.body = body;\n    return res;\n  };\n};\nexport { body as b, cookie as c, parse_1 as p, text as t, xml as x };","map":{"version":3,"names":["parse_1","parse","serialize_1","serialize","decode","decodeURIComponent","encode","encodeURIComponent","pairSplitRegExp","fieldContentRegExp","str","options","TypeError","obj","opt","pairs","split","dec","i","length","pair","eq_idx","indexOf","key","substr","trim","val","slice","undefined","tryDecode","name","enc","test","value","maxAge","isNaN","isFinite","Math","floor","domain","path","expires","toUTCString","httpOnly","secure","sameSite","toLowerCase","e","cookie","res","serializedCookie","headers","set","document","body","text","xml","b","c","p","t","x"],"sources":["/Users/alexnolla/Desktop/codetrain/react routers/addopt a pet project/adopt-a-pet-starter/node_modules/msw/lib/esm/xml-deps.js"],"sourcesContent":["/*!\n * cookie\n * Copyright(c) 2012-2014 Roman Shtylman\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n/**\n * Module exports.\n * @public\n */\n\nvar parse_1 = parse;\nvar serialize_1 = serialize;\n\n/**\n * Module variables.\n * @private\n */\n\nvar decode = decodeURIComponent;\nvar encode = encodeURIComponent;\nvar pairSplitRegExp = /; */;\n\n/**\n * RegExp to match field-content in RFC 7230 sec 3.2\n *\n * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n * field-vchar   = VCHAR / obs-text\n * obs-text      = %x80-FF\n */\n\nvar fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\n\n/**\n * Parse a cookie header.\n *\n * Parse the given cookie header string into an object\n * The object has the various cookies as keys(names) => values\n *\n * @param {string} str\n * @param {object} [options]\n * @return {object}\n * @public\n */\n\nfunction parse(str, options) {\n  if (typeof str !== 'string') {\n    throw new TypeError('argument str must be a string');\n  }\n\n  var obj = {};\n  var opt = options || {};\n  var pairs = str.split(pairSplitRegExp);\n  var dec = opt.decode || decode;\n\n  for (var i = 0; i < pairs.length; i++) {\n    var pair = pairs[i];\n    var eq_idx = pair.indexOf('=');\n\n    // skip things that don't look like key=value\n    if (eq_idx < 0) {\n      continue;\n    }\n\n    var key = pair.substr(0, eq_idx).trim();\n    var val = pair.substr(++eq_idx, pair.length).trim();\n\n    // quoted values\n    if ('\"' == val[0]) {\n      val = val.slice(1, -1);\n    }\n\n    // only assign once\n    if (undefined == obj[key]) {\n      obj[key] = tryDecode(val, dec);\n    }\n  }\n\n  return obj;\n}\n\n/**\n * Serialize data into a cookie header.\n *\n * Serialize the a name value pair into a cookie string suitable for\n * http headers. An optional options object specified cookie parameters.\n *\n * serialize('foo', 'bar', { httpOnly: true })\n *   => \"foo=bar; httpOnly\"\n *\n * @param {string} name\n * @param {string} val\n * @param {object} [options]\n * @return {string}\n * @public\n */\n\nfunction serialize(name, val, options) {\n  var opt = options || {};\n  var enc = opt.encode || encode;\n\n  if (typeof enc !== 'function') {\n    throw new TypeError('option encode is invalid');\n  }\n\n  if (!fieldContentRegExp.test(name)) {\n    throw new TypeError('argument name is invalid');\n  }\n\n  var value = enc(val);\n\n  if (value && !fieldContentRegExp.test(value)) {\n    throw new TypeError('argument val is invalid');\n  }\n\n  var str = name + '=' + value;\n\n  if (null != opt.maxAge) {\n    var maxAge = opt.maxAge - 0;\n\n    if (isNaN(maxAge) || !isFinite(maxAge)) {\n      throw new TypeError('option maxAge is invalid')\n    }\n\n    str += '; Max-Age=' + Math.floor(maxAge);\n  }\n\n  if (opt.domain) {\n    if (!fieldContentRegExp.test(opt.domain)) {\n      throw new TypeError('option domain is invalid');\n    }\n\n    str += '; Domain=' + opt.domain;\n  }\n\n  if (opt.path) {\n    if (!fieldContentRegExp.test(opt.path)) {\n      throw new TypeError('option path is invalid');\n    }\n\n    str += '; Path=' + opt.path;\n  }\n\n  if (opt.expires) {\n    if (typeof opt.expires.toUTCString !== 'function') {\n      throw new TypeError('option expires is invalid');\n    }\n\n    str += '; Expires=' + opt.expires.toUTCString();\n  }\n\n  if (opt.httpOnly) {\n    str += '; HttpOnly';\n  }\n\n  if (opt.secure) {\n    str += '; Secure';\n  }\n\n  if (opt.sameSite) {\n    var sameSite = typeof opt.sameSite === 'string'\n      ? opt.sameSite.toLowerCase() : opt.sameSite;\n\n    switch (sameSite) {\n      case true:\n        str += '; SameSite=Strict';\n        break;\n      case 'lax':\n        str += '; SameSite=Lax';\n        break;\n      case 'strict':\n        str += '; SameSite=Strict';\n        break;\n      case 'none':\n        str += '; SameSite=None';\n        break;\n      default:\n        throw new TypeError('option sameSite is invalid');\n    }\n  }\n\n  return str;\n}\n\n/**\n * Try decoding a string using a decoding function.\n *\n * @param {string} str\n * @param {function} decode\n * @private\n */\n\nfunction tryDecode(str, decode) {\n  try {\n    return decode(str);\n  } catch (e) {\n    return str;\n  }\n}\n\n/**\r\n * Sets a given cookie on the mocked response.\r\n * @example res(ctx.cookie('name', 'value'))\r\n */\r\nconst cookie = (name, value, options) => {\r\n    return (res) => {\r\n        const serializedCookie = serialize_1(name, value, options);\r\n        res.headers.set('Set-Cookie', serializedCookie);\r\n        if (typeof document !== 'undefined') {\r\n            document.cookie = serializedCookie;\r\n        }\r\n        return res;\r\n    };\r\n};\n\n/**\r\n * Sets a raw response body. Does not append any `Content-Type` headers.\r\n * @example\r\n * res(ctx.body('Successful response'))\r\n * res(ctx.body(JSON.stringify({ key: 'value' })))\r\n * @see {@link https://mswjs.io/docs/api/context/body `ctx.body()`}\r\n */\r\nconst body = (value) => {\r\n    return (res) => {\r\n        res.body = value;\r\n        return res;\r\n    };\r\n};\n\n/**\r\n * Sets a textual response body. Appends a `Content-Type: text/plain`\r\n * header on the mocked response.\r\n * @example res(ctx.text('Successful response'))\r\n * @see {@link https://mswjs.io/docs/api/context/text `ctx.text()`}\r\n */\r\nconst text = (body) => {\r\n    return (res) => {\r\n        res.headers.set('Content-Type', 'text/plain');\r\n        res.body = body;\r\n        return res;\r\n    };\r\n};\n\n/**\r\n * Sets an XML response body. Appends a `Content-Type: text/xml` header\r\n * on the mocked response.\r\n * @example\r\n * res(ctx.xml('<node key=\"value\">Content</node>'))\r\n * @see {@link https://mswjs.io/docs/api/context/xml `ctx.xml()`}\r\n */\r\nconst xml = (body) => {\r\n    return (res) => {\r\n        res.headers.set('Content-Type', 'text/xml');\r\n        res.body = body;\r\n        return res;\r\n    };\r\n};\n\nexport { body as b, cookie as c, parse_1 as p, text as t, xml as x };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}