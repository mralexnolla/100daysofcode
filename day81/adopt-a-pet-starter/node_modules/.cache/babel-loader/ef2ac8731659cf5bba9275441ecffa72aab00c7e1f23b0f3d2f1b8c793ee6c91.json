{"ast":null,"code":"import { R as RequestHandler, e as getUrlByMask, m as matchRequestUrl, g as getPublicUrlFromRequest, f as prepareRequest, h as prepareResponse, i as getTimestamp, j as getStatusCodeColor } from './RequestHandler-deps.js';\nimport { b as set, s as status, e as json, d as delay, f as fetch } from './fetch-deps.js';\nimport { c as cookie, b as body, t as text, x as xml } from './xml-deps.js';\n\n/**\r\n * Performs a case-insensitive comparison of two given strings.\r\n */\nfunction isStringEqual(actual, expected) {\n  return actual.toLowerCase() === expected.toLowerCase();\n}\nvar RESTMethods;\n(function (RESTMethods) {\n  RESTMethods[\"HEAD\"] = \"HEAD\";\n  RESTMethods[\"GET\"] = \"GET\";\n  RESTMethods[\"POST\"] = \"POST\";\n  RESTMethods[\"PUT\"] = \"PUT\";\n  RESTMethods[\"PATCH\"] = \"PATCH\";\n  RESTMethods[\"OPTIONS\"] = \"OPTIONS\";\n  RESTMethods[\"DELETE\"] = \"DELETE\";\n})(RESTMethods || (RESTMethods = {}));\nconst restContext = {\n  set,\n  status,\n  cookie,\n  body,\n  text,\n  json,\n  xml,\n  delay,\n  fetch\n};\n/**\r\n * Request handler for REST API requests.\r\n * Provides request matching based on method and URL.\r\n */\nclass RestHandler extends RequestHandler {\n  constructor(method, mask, resolver) {\n    super({\n      info: {\n        header: `${method} ${mask}`,\n        mask,\n        method\n      },\n      ctx: restContext,\n      resolver\n    });\n    this.checkRedundantQueryParameters();\n  }\n  checkRedundantQueryParameters() {\n    const {\n      method,\n      mask\n    } = this.info;\n    const resolvedMask = getUrlByMask(mask);\n    if (resolvedMask instanceof URL && resolvedMask.search !== '') {\n      const queryParams = [];\n      resolvedMask.searchParams.forEach((_, paramName) => {\n        queryParams.push(paramName);\n      });\n      console.warn(`\\\n[MSW] Found a redundant usage of query parameters in the request handler URL for \"${method} ${mask}\". Please match against a path instead, and access query parameters in the response resolver function:\n\nrest.${method.toLowerCase()}(\"${resolvedMask.pathname}\", (req, res, ctx) => {\n  const query = req.url.searchParams\n${queryParams.map(paramName => `\\\n  const ${paramName} = query.get(\"${paramName}\")`).join('\\n')}\n})\\\n      `);\n    }\n  }\n  parse(request) {\n    return matchRequestUrl(request.url, this.info.mask);\n  }\n  getPublicRequest(request, parsedResult) {\n    return Object.assign(Object.assign({}, request), {\n      params: parsedResult.params || {}\n    });\n  }\n  predicate(request, parsedResult) {\n    return isStringEqual(this.info.method, request.method) && parsedResult.matches;\n  }\n  log(request, response) {\n    const publicUrl = getPublicUrlFromRequest(request);\n    const loggedRequest = prepareRequest(request);\n    const loggedResponse = prepareResponse(response);\n    console.groupCollapsed('[MSW] %s %s %s (%c%s%c)', getTimestamp(), request.method, publicUrl, `color:${getStatusCodeColor(response.status)}`, response.status, 'color:inherit');\n    console.log('Request', loggedRequest);\n    console.log('Handler:', {\n      mask: this.info.mask,\n      resolver: this.resolver\n    });\n    console.log('Response', loggedResponse);\n    console.groupEnd();\n  }\n}\nfunction createRestHandler(method) {\n  return (mask, resolver) => {\n    return new RestHandler(method, mask, resolver);\n  };\n}\nconst rest = {\n  head: createRestHandler(RESTMethods.HEAD),\n  get: createRestHandler(RESTMethods.GET),\n  post: createRestHandler(RESTMethods.POST),\n  put: createRestHandler(RESTMethods.PUT),\n  delete: createRestHandler(RESTMethods.DELETE),\n  patch: createRestHandler(RESTMethods.PATCH),\n  options: createRestHandler(RESTMethods.OPTIONS)\n};\nexport { RestHandler as R, RESTMethods as a, restContext as b, isStringEqual as i, rest as r };","map":{"version":3,"names":["R","RequestHandler","e","getUrlByMask","m","matchRequestUrl","g","getPublicUrlFromRequest","f","prepareRequest","h","prepareResponse","i","getTimestamp","j","getStatusCodeColor","b","set","s","status","json","d","delay","fetch","c","cookie","body","t","text","x","xml","isStringEqual","actual","expected","toLowerCase","RESTMethods","restContext","RestHandler","constructor","method","mask","resolver","info","header","ctx","checkRedundantQueryParameters","resolvedMask","URL","search","queryParams","searchParams","forEach","_","paramName","push","console","warn","pathname","map","join","parse","request","url","getPublicRequest","parsedResult","Object","assign","params","predicate","matches","log","response","publicUrl","loggedRequest","loggedResponse","groupCollapsed","groupEnd","createRestHandler","rest","head","HEAD","get","GET","post","POST","put","PUT","delete","DELETE","patch","PATCH","options","OPTIONS","a","r"],"sources":["/Users/alexnolla/Desktop/codetrain/react routers/addopt a pet project/adopt-a-pet-starter/node_modules/msw/lib/esm/rest-deps.js"],"sourcesContent":["import { R as RequestHandler, e as getUrlByMask, m as matchRequestUrl, g as getPublicUrlFromRequest, f as prepareRequest, h as prepareResponse, i as getTimestamp, j as getStatusCodeColor } from './RequestHandler-deps.js';\nimport { b as set, s as status, e as json, d as delay, f as fetch } from './fetch-deps.js';\nimport { c as cookie, b as body, t as text, x as xml } from './xml-deps.js';\n\n/**\r\n * Performs a case-insensitive comparison of two given strings.\r\n */\r\nfunction isStringEqual(actual, expected) {\r\n    return actual.toLowerCase() === expected.toLowerCase();\r\n}\n\nvar RESTMethods;\r\n(function (RESTMethods) {\r\n    RESTMethods[\"HEAD\"] = \"HEAD\";\r\n    RESTMethods[\"GET\"] = \"GET\";\r\n    RESTMethods[\"POST\"] = \"POST\";\r\n    RESTMethods[\"PUT\"] = \"PUT\";\r\n    RESTMethods[\"PATCH\"] = \"PATCH\";\r\n    RESTMethods[\"OPTIONS\"] = \"OPTIONS\";\r\n    RESTMethods[\"DELETE\"] = \"DELETE\";\r\n})(RESTMethods || (RESTMethods = {}));\r\nconst restContext = {\r\n    set,\r\n    status,\r\n    cookie,\r\n    body,\r\n    text,\r\n    json,\r\n    xml,\r\n    delay,\r\n    fetch,\r\n};\r\n/**\r\n * Request handler for REST API requests.\r\n * Provides request matching based on method and URL.\r\n */\r\nclass RestHandler extends RequestHandler {\r\n    constructor(method, mask, resolver) {\r\n        super({\r\n            info: {\r\n                header: `${method} ${mask}`,\r\n                mask,\r\n                method,\r\n            },\r\n            ctx: restContext,\r\n            resolver,\r\n        });\r\n        this.checkRedundantQueryParameters();\r\n    }\r\n    checkRedundantQueryParameters() {\r\n        const { method, mask } = this.info;\r\n        const resolvedMask = getUrlByMask(mask);\r\n        if (resolvedMask instanceof URL && resolvedMask.search !== '') {\r\n            const queryParams = [];\r\n            resolvedMask.searchParams.forEach((_, paramName) => {\r\n                queryParams.push(paramName);\r\n            });\r\n            console.warn(`\\\n[MSW] Found a redundant usage of query parameters in the request handler URL for \"${method} ${mask}\". Please match against a path instead, and access query parameters in the response resolver function:\n\nrest.${method.toLowerCase()}(\"${resolvedMask.pathname}\", (req, res, ctx) => {\n  const query = req.url.searchParams\n${queryParams\r\n                .map((paramName) => `\\\n  const ${paramName} = query.get(\"${paramName}\")`)\r\n                .join('\\n')}\n})\\\n      `);\r\n        }\r\n    }\r\n    parse(request) {\r\n        return matchRequestUrl(request.url, this.info.mask);\r\n    }\r\n    getPublicRequest(request, parsedResult) {\r\n        return Object.assign(Object.assign({}, request), { params: parsedResult.params || {} });\r\n    }\r\n    predicate(request, parsedResult) {\r\n        return (isStringEqual(this.info.method, request.method) && parsedResult.matches);\r\n    }\r\n    log(request, response) {\r\n        const publicUrl = getPublicUrlFromRequest(request);\r\n        const loggedRequest = prepareRequest(request);\r\n        const loggedResponse = prepareResponse(response);\r\n        console.groupCollapsed('[MSW] %s %s %s (%c%s%c)', getTimestamp(), request.method, publicUrl, `color:${getStatusCodeColor(response.status)}`, response.status, 'color:inherit');\r\n        console.log('Request', loggedRequest);\r\n        console.log('Handler:', {\r\n            mask: this.info.mask,\r\n            resolver: this.resolver,\r\n        });\r\n        console.log('Response', loggedResponse);\r\n        console.groupEnd();\r\n    }\r\n}\n\nfunction createRestHandler(method) {\r\n    return (mask, resolver) => {\r\n        return new RestHandler(method, mask, resolver);\r\n    };\r\n}\r\nconst rest = {\r\n    head: createRestHandler(RESTMethods.HEAD),\r\n    get: createRestHandler(RESTMethods.GET),\r\n    post: createRestHandler(RESTMethods.POST),\r\n    put: createRestHandler(RESTMethods.PUT),\r\n    delete: createRestHandler(RESTMethods.DELETE),\r\n    patch: createRestHandler(RESTMethods.PATCH),\r\n    options: createRestHandler(RESTMethods.OPTIONS),\r\n};\n\nexport { RestHandler as R, RESTMethods as a, restContext as b, isStringEqual as i, rest as r };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}