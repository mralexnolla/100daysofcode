{"ast":null,"code":"var _jsxFileName = \"/Users/alexnolla/Desktop/codetrain/git/day88/brute/src/components/Profile/Profile.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport useToggle from '../../hooks/useToggle';\nimport { ProfileContext } from '../../providers/ProfileProvider';\nimport { checkUsernameValidity } from './checkUsernameValidity.js';\nimport getIconOptions from './getIconOptions';\nimport styles from './Profile.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Profile = () => {\n  _s();\n\n  const {\n    currentUser: {\n      name,\n      icon\n    },\n    setCurrentUser\n  } = useContext(ProfileContext);\n  const [showEditForm, toggleShowEditForm] = useToggle(false);\n  const [showUsernameValidation, toggleShowUsernameValidation] = useToggle(false);\n  const [username, setUsername] = useState(name);\n  const [iconOptions, setIconOptions] = useState();\n  useEffect(() => {\n    const load = () => {\n      const userIconOptions = getIconOptions();\n      setIconOptions(userIconOptions);\n    };\n\n    load();\n  }, []);\n  const isUsernameValid = checkUsernameValidity(name);\n\n  const onSaveProfile = e => {\n    e.preventDefault();\n    setCurrentUser({\n      name: e.target.username.value,\n      icon: e.target.icon.value\n    });\n    toggleShowEditForm();\n  };\n\n  const onToggleUsernameValidation = e => {\n    e.preventDefault();\n    toggleShowUsernameValidation();\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleShowEditForm,\n      children: [name, \" \", icon]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), showEditForm && /*#__PURE__*/_jsxDEV(\"aside\", {\n      className: styles.container,\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: onSaveProfile,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"username\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.title,\n            children: [\"Username\", /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: onToggleUsernameValidation,\n              children: \"?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 15\n          }, this), showUsernameValidation && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: \"The username must not be a duplicate of any existing user name.\"\n          }, void 0, false), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"username\",\n            name: \"username\",\n            onChange: e => setUsername(e.target.value),\n            value: username\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 15\n          }, this), \"Username is \", isUsernameValid ? 'valid.' : 'not valid.']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this), iconOptions && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"icon\",\n            children: \"Icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            name: \"icon\",\n            id: \"icon\",\n            defaultValue: icon,\n            children: iconOptions.map(icon => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: icon,\n              children: icon\n            }, icon, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.actionsContainer,\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: toggleShowEditForm,\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Profile, \"CgB8ddAOeW/AEGu0g+Ot3TMiOeI=\", false, function () {\n  return [useToggle, useToggle];\n});\n\n_c = Profile;\nexport default Profile;\n\nvar _c;\n\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"sources":["/Users/alexnolla/Desktop/codetrain/git/day88/brute/src/components/Profile/Profile.js"],"names":["React","useContext","useEffect","useState","useToggle","ProfileContext","checkUsernameValidity","getIconOptions","styles","Profile","currentUser","name","icon","setCurrentUser","showEditForm","toggleShowEditForm","showUsernameValidation","toggleShowUsernameValidation","username","setUsername","iconOptions","setIconOptions","load","userIconOptions","isUsernameValid","onSaveProfile","e","preventDefault","target","value","onToggleUsernameValidation","container","title","map","actionsContainer"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport useToggle from '../../hooks/useToggle';\nimport { ProfileContext } from '../../providers/ProfileProvider';\nimport { checkUsernameValidity } from './checkUsernameValidity.js';\nimport getIconOptions from './getIconOptions';\n\nimport styles from './Profile.module.css';\n\nconst Profile = () => {\n  const {\n    currentUser: { name, icon },\n    setCurrentUser,\n  } = useContext(ProfileContext);\n  const [showEditForm, toggleShowEditForm] = useToggle(false);\n  const [showUsernameValidation, toggleShowUsernameValidation] =\n    useToggle(false);\n  const [username, setUsername] = useState(name);\n  const [iconOptions, setIconOptions] = useState();\n\n  useEffect(() => {\n    const load = () => {\n      const userIconOptions = getIconOptions();\n      setIconOptions(userIconOptions);\n    };\n\n    load();\n  }, []);\n\n  const isUsernameValid = checkUsernameValidity(name);\n\n  const onSaveProfile = (e) => {\n    e.preventDefault();\n\n    setCurrentUser({\n      name: e.target.username.value,\n      icon: e.target.icon.value,\n    });\n    toggleShowEditForm();\n  };\n\n  const onToggleUsernameValidation = (e) => {\n    e.preventDefault();\n    toggleShowUsernameValidation();\n  };\n\n  return (\n    <>\n      <button onClick={toggleShowEditForm}>\n        {name} {icon}\n      </button>\n      {showEditForm && (\n        <aside className={styles.container}>\n          <form onSubmit={onSaveProfile}>\n            <label htmlFor='username'>\n              <div className={styles.title}>\n                Username\n                <button onClick={onToggleUsernameValidation}>?</button>\n              </div>\n              {showUsernameValidation && (\n                <>\n                  The username must not be a duplicate of any existing user\n                  name.\n                </>\n              )}\n              <input\n                type='text'\n                id='username'\n                name='username'\n                onChange={(e) => setUsername(e.target.value)}\n                value={username}\n              />\n              Username is {isUsernameValid ? 'valid.' : 'not valid.'}\n            </label>\n            {iconOptions && (\n              <>\n                <label htmlFor='icon'>Icon</label>\n                <select name='icon' id='icon' defaultValue={icon}>\n                  {iconOptions.map((icon) => (\n                    <option key={icon} value={icon}>\n                      {icon}\n                    </option>\n                  ))}\n                </select>\n              </>\n            )}\n\n            <div className={styles.actionsContainer}>\n              <button type='button' onClick={toggleShowEditForm}>\n                Cancel\n              </button>\n              <button type='submit'>Save</button>\n            </div>\n          </form>\n        </aside>\n      )}\n    </>\n  );\n};\n\nexport default Profile;\n"]},"metadata":{},"sourceType":"module"}