{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nconst LOCAL_STORAGE_THEME_KEY = \"theme\";\n\nconst useTheme = () => {\n  _s();\n\n  // We persist the theme to local storage so that it can be restored when the user reloads the page.\n  const [theme, setTheme] = useState(localStorage.getItem(LOCAL_STORAGE_THEME_KEY) || \"light\"); // We use useEffect to update the theme when the user changes it.\n\n  useEffect(() => {\n    document.documentElement.setAttribute(\"data-theme\", theme);\n    localStorage.setItem(LOCAL_STORAGE_THEME_KEY, theme);\n  }, [theme]);\n\n  const onToggleTheme = () => {\n    // We toggle the theme between \"light\" and \"dark\".\n    setTheme(previousTheme => previousTheme === \"light\" ? \"dark\" : \"light\");\n  };\n\n  const isDarkTheme = theme === \"dark\";\n  return {\n    onToggleTheme,\n    isDarkTheme\n  };\n};\n\n_s(useTheme, \"6G2NY5XYTdAO+FU0Vd0Xtx1tKho=\");\n\nexport default useTheme;","map":{"version":3,"sources":["/Users/alexnolla/Desktop/codetrain/git/day88/starter/src/hooks/useTheme.js"],"names":["useState","useEffect","LOCAL_STORAGE_THEME_KEY","useTheme","theme","setTheme","localStorage","getItem","document","documentElement","setAttribute","setItem","onToggleTheme","previousTheme","isDarkTheme"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,MAAMC,uBAAuB,GAAG,OAAhC;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACrB;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAChCM,YAAY,CAACC,OAAb,CAAqBL,uBAArB,KAAiD,OADjB,CAAlC,CAFqB,CAMrB;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,QAAQ,CAACC,eAAT,CAAyBC,YAAzB,CAAsC,YAAtC,EAAoDN,KAApD;AACAE,IAAAA,YAAY,CAACK,OAAb,CAAqBT,uBAArB,EAA8CE,KAA9C;AACD,GAHQ,EAGN,CAACA,KAAD,CAHM,CAAT;;AAKA,QAAMQ,aAAa,GAAG,MAAM;AAC1B;AACAP,IAAAA,QAAQ,CAAEQ,aAAD,IAAoBA,aAAa,KAAK,OAAlB,GAA4B,MAA5B,GAAqC,OAA1D,CAAR;AACD,GAHD;;AAKA,QAAMC,WAAW,GAAGV,KAAK,KAAK,MAA9B;AAEA,SAAO;AACLQ,IAAAA,aADK;AAELE,IAAAA;AAFK,GAAP;AAID,CAvBD;;GAAMX,Q;;AAyBN,eAAeA,QAAf","sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst LOCAL_STORAGE_THEME_KEY = \"theme\";\n\nconst useTheme = () => {\n  // We persist the theme to local storage so that it can be restored when the user reloads the page.\n  const [theme, setTheme] = useState(\n    localStorage.getItem(LOCAL_STORAGE_THEME_KEY) || \"light\"\n  );\n\n  // We use useEffect to update the theme when the user changes it.\n  useEffect(() => {\n    document.documentElement.setAttribute(\"data-theme\", theme);\n    localStorage.setItem(LOCAL_STORAGE_THEME_KEY, theme);\n  }, [theme]);\n\n  const onToggleTheme = () => {\n    // We toggle the theme between \"light\" and \"dark\".\n    setTheme((previousTheme) => (previousTheme === \"light\" ? \"dark\" : \"light\"));\n  };\n\n  const isDarkTheme = theme === \"dark\";\n\n  return {\n    onToggleTheme,\n    isDarkTheme,\n  };\n};\n\nexport default useTheme;\n"]},"metadata":{},"sourceType":"module"}